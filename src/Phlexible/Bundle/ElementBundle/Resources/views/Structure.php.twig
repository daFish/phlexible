<?php

namespace {{ class.namespace }};

use Phlexible\Component\ElementProxy\ChildStructureInterface;
use Phlexible\Component\ElementProxy\StructureCollection;
{% include 'collection_import.php.twig' %}

{% for collection in class.collections %}
{% include 'collection_class.php.twig' %}
{% endfor %}

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY PHLEXIBLE'S PROXY GENERATOR
 *
 * @see \Phlexible\Component\ElementProxy\Generator\ProxyGenerator
 */
final class {{ class.classname }} implements ChildStructureInterface
{
    /**
     * @var string
     */
    private $__id;

    /**
     * @var string
     */
    private $__name = '{{ class.name }}';

    /**
     * @var string
     */
    private $__dsId = '{{ class.dsId }}';

{% include 'value_attributes.php.twig' %}
{% include 'structure_attributes.php.twig' %}
{% include 'collection_attributes.php.twig' %}

    /**
     * @param string $id
     */
    public function __construct($id)
    {
        $this->__id = $id;
{% include 'collection_init.php.twig' %}
    }

{% include 'value_values.php.twig' %}

    /**
     * @param array $children
     */
    public function __setChildren(array $children)
    {
        foreach ($children as $collectionName => $collection) {
            foreach ($collection as $structure) {
{% include 'collection_set_children.php.twig' %}
{% include 'structure_set_children.php.twig' %}
            }
        }
    }

    /**
     * @return array
     */
    public function __getChildren()
    {
        return array(
{% include 'collection_get_children.php.twig' %}
{% include 'structure_get_children.php.twig' %}
        );
    }

    /**
     * @return string
     */
    public function __id()
    {
        return $this->__id;
    }

    /**
     * @return string
     */
    public function __name()
    {
        return $this->__name;
    }

    /**
     * @return string
     */
    public function __dsId()
    {
        return $this->__dsId;
    }

    /**
     * @return \Phlexible\Component\ElementProxy\ChildStructureInterface[]
     */
    public function __toArray()
    {
        $children = array();
        foreach ($this->__getChildren() as $name => $nameChildren) {
            foreach ($nameChildren as $child) {
                $childData = $child->__toArray();
                $childData['parent'] = $name;
                $children[] = $childData;
            }
        }
        return array(
            'id'         => $this->__id(),
            'dsId'       => $this->__dsId(),
            'name'       => $this->__name(),
            'values'     => $this->__getValues(),
            'children'   => $children
        );
    }
}

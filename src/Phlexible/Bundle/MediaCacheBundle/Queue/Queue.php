<?php
/**
 * phlexible
 *
 * @copyright 2007-2013 brainbits GmbH (http://www.brainbits.net)
 * @license   proprietary
 */

namespace Phlexible\Bundle\MediaCacheBundle\Queue;

use Doctrine\Common\Collections\ArrayCollection;
use Phlexible\Bundle\MediaCacheBundle\Entity\CacheItem;

/**
 * Queue holds all cache items generated by a batch.
 *
 * @author Stephan Wentz <sw@brainbits.net>
 */
class Queue implements \Countable
{
    /**
     * @var CacheItem[]|ArrayCollection
     */
    private $items;

    /**
     * Constructor.
     */
    public function __construct()
    {
        $this->items = new ArrayCollection();
    }

    /**
     * @param CacheItem $item
     *
     * @return $this
     */
    public function add(CacheItem $item)
    {
        if (!$this->items->contains($item)) {
            $this->items->add($item);
        }

        return $this;
    }

    /**
     * @param CacheItem $item
     *
     * @return $this
     */
    public function remove(CacheItem $item)
    {
        if ($this->items->contains($item)) {
            $this->items->removeElement($item);
        }

        return $this;
    }

    /**
     * @return CacheItem
     */
    public function first()
    {
        return $this->items->first();
    }

    /**
     * @return CacheItem[]
     */
    public function all()
    {
        return $this->items->getValues();
    }

    /**
     * @param Queue $queue
     *
     * @return $this
     */
    public function merge(Queue $queue)
    {
        foreach ($queue->all() as $queueItem) {
            $this->add($queueItem);
        }

        return $this;
    }

    /**
     * @return int
     */
    public function count()
    {
        return $this->items->count();
    }
}
